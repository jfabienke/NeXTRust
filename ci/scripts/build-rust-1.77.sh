#!/usr/bin/env bash
# ci/scripts/build-rust-1.77.sh - Automated Rust 1.77 build for NeXTRust
#
# Purpose: Build Rust 1.77 with custom LLVM 17 for m68k-next-nextstep target
# Usage: ./ci/scripts/build-rust-1.77.sh
#
# Prerequisites:
#   - Custom LLVM built with ./build-custom-llvm.sh
#   - Homebrew packages: cmake ninja ccache zstd
#
set -euo pipefail

echo "=== Building Rust 1.77 for NeXTRust ==="
echo

# Configuration
RUST_VERSION="1.77.0"
PROJECT_ROOT="$(cd "$(dirname "$0")/../.." && pwd)"
RUST_DIR="$PROJECT_ROOT/rust-1.77"
BUILD_DIR="$PROJECT_ROOT/build/rust-1.77"
TOOLCHAIN_DIR="$PROJECT_ROOT/toolchain"

# Verify prerequisites
if [[ ! -x "$TOOLCHAIN_DIR/bin/llvm-config" ]]; then
    echo "ERROR: Custom LLVM not found. Run build-custom-llvm.sh first."
    exit 1
fi

if ! command -v zstd &> /dev/null; then
    echo "ERROR: zstd not found. Install with: brew install zstd"
    exit 1
fi

# Set environment for Homebrew libraries on Apple Silicon
if [[ "$(uname -m)" == "arm64" ]]; then
    export LIBRARY_PATH="/opt/homebrew/lib:${LIBRARY_PATH:-}"
    export CPATH="/opt/homebrew/include:${CPATH:-}"
    echo "Configured for Apple Silicon (arm64)"
fi

# Clone Rust if needed
if [[ ! -d "$RUST_DIR" ]]; then
    echo "Cloning Rust $RUST_VERSION..."
    git clone --branch "$RUST_VERSION" --depth 1 https://github.com/rust-lang/rust.git "$RUST_DIR"
else
    echo "Using existing Rust source in $RUST_DIR"
fi

cd "$RUST_DIR"

# Create config.toml
echo "Creating config.toml..."
cat > config.toml << EOF
# Rust 1.77 build configuration for NeXTRust
# Generated by build-rust-1.77.sh on $(date)

profile = "compiler"

[llvm]
download-ci-llvm = false
link-shared = false
assertions = false
ccache = false

[target.$(rustc -vV | grep host | cut -d' ' -f2)]
llvm-config = "$TOOLCHAIN_DIR/bin/llvm-config"

[build]
build = "$(rustc -vV | grep host | cut -d' ' -f2)"
host = ["$(rustc -vV | grep host | cut -d' ' -f2)"]
target = ["$(rustc -vV | grep host | cut -d' ' -f2)"]
extended = true
tools = ["cargo", "rustdoc", "clippy", "rustfmt"]
verbose = 1
build-dir = "$BUILD_DIR"
docs = false

[rust]
channel = "stable"
debuginfo-level = 1
codegen-units = 16
lto = "off"
rpath = false
EOF

# Build strategy selection
echo
echo "Build options:"
echo "1) Full build (may fail with dsymutil errors)"
echo "2) Compiler-only build (recommended)"
read -p "Select option [1-2]: " BUILD_OPTION

case $BUILD_OPTION in
    1)
        echo "Building full Rust toolchain..."
        python3 x.py build --stage 1
        ;;
    2)
        echo "Building Rust compiler only..."
        python3 x.py build --stage 1 compiler/rustc
        ;;
    *)
        echo "Invalid option. Building compiler only..."
        python3 x.py build --stage 1 compiler/rustc
        ;;
esac

# Verify build
RUSTC_BIN="$BUILD_DIR/$(rustc -vV | grep host | cut -d' ' -f2)/stage1/bin/rustc"
if [[ -x "$RUSTC_BIN" ]]; then
    echo
    echo "✅ Rust build successful!"
    echo "rustc location: $RUSTC_BIN"
    echo
    echo "Version info:"
    "$RUSTC_BIN" --version --verbose
    
    # Create convenience symlink
    mkdir -p "$PROJECT_ROOT/bin"
    ln -sf "$RUSTC_BIN" "$PROJECT_ROOT/bin/rustc-1.77"
    echo
    echo "Convenience symlink created: $PROJECT_ROOT/bin/rustc-1.77"
    
    # Next steps
    echo
    echo "Next steps:"
    echo "1. Test with: $PROJECT_ROOT/bin/rustc-1.77 --version"
    echo "2. For M68k targets, use rustup nightly with:"
    echo "   cargo +nightly build --target $PROJECT_ROOT/targets/m68k-next-nextstep.json -Z build-std=core,alloc"
else
    echo "❌ Build failed! rustc binary not found at expected location."
    exit 1
fi