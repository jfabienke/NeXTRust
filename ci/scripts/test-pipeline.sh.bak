#!/usr/bin/env bash
# ci/scripts/test-pipeline.sh - Test CI pipeline in dry-run mode
#
# Purpose: Test pipeline components without side effects
# Usage: ./test-pipeline.sh [--component <name>]

set -euo pipefail

# Test mode flags
export DRY_RUN=1
export SKIP_EXTERNAL_APIS=1
export NEXTRUST_DEBUG=1

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test result tracking
TESTS_PASSED=0
TESTS_FAILED=0

log_test() {
    echo -e "${YELLOW}[TEST]${NC} $1"
}

log_pass() {
    echo -e "${GREEN}[PASS]${NC} $1"
    ((TESTS_PASSED++))
}

log_fail() {
    echo -e "${RED}[FAIL]${NC} $1"
    ((TESTS_FAILED++))
}

# Test dispatcher routing
test_dispatcher() {
    log_test "Testing dispatcher routing"
    
    # Test pre-tool-use hook
    local pre_payload='{"tool_name":"Bash","tool_args":{"command":"build-custom-llvm.sh"},"session_id":"test-123"}'
    if echo "$pre_payload" | ./hooks/dispatcher-v2.sh pre >/dev/null 2>&1; then
        log_pass "Pre-tool-use hook routing"
    else
        log_fail "Pre-tool-use hook routing"
    fi
    
    # Test post-tool-use hook with failure
    local post_payload='{"tool_name":"Bash","tool_args":{"command":"cargo build"},"tool_response":{"exit_code":1,"output":"error"},"session_id":"test-124"}'
    if echo "$post_payload" | ./hooks/dispatcher-v2.sh post >/dev/null 2>&1; then
        log_pass "Post-tool-use hook routing"
    else
        log_fail "Post-tool-use hook routing"
    fi
    
    # Test stop hook
    local stop_payload='{"session_id":"test-125"}'
    if echo "$stop_payload" | ./hooks/dispatcher-v2.sh stop >/dev/null 2>&1; then
        log_pass "Stop hook routing"
    else
        log_fail "Stop hook routing"
    fi
}

# Test idempotency
test_idempotency() {
    log_test "Testing idempotency mechanism"
    
    # Source the idempotency functions
    source hooks/dispatcher.d/common/idempotency.sh
    
    # Test key generation
    export SESSION_ID="test-session"
    export COMMIT_SHA="abc123"
    export RUN_ID="456"
    export RUN_ATTEMPT="1"
    
    local key1=$(generate_idempotency_key)
    local key2=$(generate_idempotency_key)
    
    if [[ "$key1" == "$key2" ]]; then
        log_pass "Idempotency key generation is deterministic"
    else
        log_fail "Idempotency key generation is not deterministic"
    fi
    
    # Clean test files
    rm -rf .claude/sessions/test-*
}

# Test known issue matching
test_known_issues() {
    log_test "Testing known issue detection"
    
    # Test atomic error matching
    local error="undefined reference to __sync_val_compare_and_swap"
    local context='{"phase":"phase-3","cpu_variant":"m68030","full_output":"compiler-rt/lib/m68k/atomic.c: undefined reference"}'
    
    if python3 ci/scripts/match-known-issue.py "$error" "$context" >/dev/null 2>&1; then
        log_pass "Known atomic issue detection"
    else
        log_fail "Known atomic issue detection"
    fi
    
    # Test no match case
    local unknown_error="random unknown error"
    if ! python3 ci/scripts/match-known-issue.py "$unknown_error" "$context" >/dev/null 2>&1; then
        log_pass "Unknown issue correctly not matched"
    else
        log_fail "Unknown issue incorrectly matched"
    fi
}

# Test status append
test_status_append() {
    log_test "Testing status append with locking"
    
    # Create test status files
    mkdir -p docs/ci-status
    echo '{"activities":[]}' > docs/ci-status/pipeline-log.json
    echo "# Test Log" > docs/ci-status/pipeline-log.md
    
    # Test concurrent appends
    for i in {1..5}; do
        python3 ci/scripts/status-append.py "test_event" "{\"test\": $i}" &
    done
    
    wait
    
    # Check if all entries were added
    local count=$(jq '.activities | length' docs/ci-status/pipeline-log.json)
    if [[ "$count" -eq 5 ]]; then
        log_pass "Concurrent status appends handled correctly"
    else
        log_fail "Concurrent status appends failed (expected 5, got $count)"
    fi
}

# Test environment setup
test_env_setup() {
    log_test "Testing environment setup"
    
    # Test with GitHub env
    export GITHUB_ENV="/tmp/test_github_env"
    echo -n > "$GITHUB_ENV"
    
    if ci/scripts/setup-env.sh >/dev/null 2>&1; then
        if grep -q "CPU_VARIANT=" "$GITHUB_ENV"; then
            log_pass "Environment setup exports variables"
        else
            log_fail "Environment setup missing variables"
        fi
    else
        log_fail "Environment setup script failed"
    fi
    
    rm -f "$GITHUB_ENV"
    unset GITHUB_ENV
}

# Test metrics emission
test_metrics() {
    log_test "Testing metrics emission"
    
    # Source metrics functions
    source hooks/dispatcher.d/common/metrics.sh
    
    # Test metric emission
    emit_metric "test.metric" 42 "env:test"
    
    if [[ -f ".claude/metrics.csv" ]] && grep -q "test.metric,42,env:test" .claude/metrics.csv; then
        log_pass "Metrics emission to CSV"
    else
        log_fail "Metrics emission to CSV"
    fi
}

# Main test runner
main() {
    echo "=== NeXTRust CI Pipeline Test Suite ==="
    echo "Running in dry-run mode with external APIs disabled"
    echo
    
    # Parse arguments
    COMPONENT="${1:-all}"
    
    case "$COMPONENT" in
        dispatcher)
            test_dispatcher
            ;;
        idempotency)
            test_idempotency
            ;;
        known-issues)
            test_known_issues
            ;;
        status)
            test_status_append
            ;;
        env)
            test_env_setup
            ;;
        metrics)
            test_metrics
            ;;
        all)
            test_dispatcher
            test_idempotency
            test_known_issues
            test_status_append
            test_env_setup
            test_metrics
            ;;
        *)
            echo "Unknown component: $COMPONENT"
            echo "Available: dispatcher, idempotency, known-issues, status, env, metrics, all"
            exit 1
            ;;
    esac
    
    # Summary
    echo
    echo "=== Test Summary ==="
    echo -e "Passed: ${GREEN}$TESTS_PASSED${NC}"
    echo -e "Failed: ${RED}$TESTS_FAILED${NC}"
    
    if [[ $TESTS_FAILED -eq 0 ]]; then
        echo -e "${GREEN}All tests passed!${NC}"
        exit 0
    else
        echo -e "${RED}Some tests failed${NC}"
        exit 1
    fi
}

main "$@"