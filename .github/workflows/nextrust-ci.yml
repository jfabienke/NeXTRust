name: NeXTRust CI
on: 
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      command:
        description: 'Slash command to execute'
        required: false
        type: string
      args:
        description: 'Command arguments'
        required: false
        type: string
      sha:
        description: 'Commit SHA to build'
        required: false
        type: string
      pr_number:
        description: 'PR number for response'
        required: false
        type: string
      triggered_by:
        description: 'User who triggered the command'
        required: false
        type: string

env:
  CI_CONFIG_VERSION: 2.1
  # OpenAI API Configuration (from secrets)
  O3_ENDPOINT: ${{ secrets.O3_ENDPOINT }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # Handle slash commands separately
  slash-command:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.command != '' }}
    runs-on: ubuntu-latest
    env:
      CI_COMMAND: ${{ inputs.command }}
      CI_ARGS: ${{ inputs.args }}
      CI_PR_NUMBER: ${{ inputs.pr_number }}
      CI_TRIGGERED_BY: ${{ inputs.triggered_by }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
          submodules: recursive
      
      - name: Setup Environment
        run: |
          chmod +x ci/scripts/*.sh
          chmod +x hooks/*.sh
          ci/scripts/setup-env.sh
      
      - name: Execute Slash Command
        run: |
          # The dispatcher will detect CI_COMMAND and route appropriately
          ./hooks/dispatcher-v2.sh slash-command
      
  build-matrix:
    # Skip for slash command executions
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.command == '' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust_profile: [debug, release]
        cpu_variant: [m68030, m68040]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    env:
      O3_ENDPOINT: ${{ secrets.O3_ENDPOINT }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Environment
        run: |
          # Export matrix variables and CI context
          export CPU_VARIANT="${{ matrix.cpu_variant }}"
          export OS_NAME="${{ matrix.os }}"
          export RUST_PROFILE="${{ matrix.rust_profile }}"
          ci/scripts/setup-env.sh
      
      - name: Setup Claude Code Environment
        run: |
          # Ensure hooks are executable
          chmod +x hooks/dispatcher.sh
          chmod +x ci/scripts/*.sh
          chmod +x ci/scripts/*.py
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Python Dependencies
        run: |
          pip install typer
      
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.cpu_variant }}-${{ matrix.rust_profile }}
          variant: ccache
          max-size: 2G
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropics/claude-code
          claude --version
          
          # Configure Claude Code API key
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
      
      - name: Log Build Start
        run: |
          echo "::group::Matrix Configuration"
          echo "OS: ${{ matrix.os }}"
          echo "Profile: ${{ matrix.rust_profile }}"
          echo "CPU: ${{ matrix.cpu_variant }}"
          echo "::endgroup::"
          
          python3 ci/scripts/status-append.py "build_start" \
            '{"matrix": "${{ matrix.os }}-${{ matrix.rust_profile }}-${{ matrix.cpu_variant }}"}'
      
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            build/llvm-cache
            build/rust-cache
            toolchain
          key: ${{ runner.os }}-nextrust-${{ hashFiles('**/Cargo.lock', 'patches/llvm/*') }}-${{ matrix.cpu_variant }}
          restore-keys: |
            ${{ runner.os }}-nextrust-${{ hashFiles('**/Cargo.lock', 'patches/llvm/*') }}-
            ${{ runner.os }}-nextrust-
      
      - name: Run Agent Feedback Loop
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          O3_ENDPOINT: ${{ secrets.O3_ENDPOINT }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CPU_VARIANT: ${{ matrix.cpu_variant }}
          OS_NAME: ${{ matrix.os }}
          RUST_PROFILE: ${{ matrix.rust_profile }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
          RUNNER_NAME: ${{ runner.name }}
        run: |
          # Export matrix variables for hooks
          echo "CPU_VARIANT=${{ matrix.cpu_variant }}" >> $GITHUB_ENV
          echo "OS_NAME=${{ matrix.os }}" >> $GITHUB_ENV
          echo "RUST_PROFILE=${{ matrix.rust_profile }}" >> $GITHUB_ENV
          
          # Run Claude Code with agent feedback loop
          ci/scripts/agent-feedback-loop.sh
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.rust_profile }}-${{ matrix.cpu_variant }}
          path: |
            target/m68k-next-nextstep/${{ matrix.rust_profile }}/*.mach-o
            build-logs/*.log
      
      - name: Update GitHub Checks
        if: always()
        run: |
          # Map job status to proper conclusion
          case "${{ job.status }}" in
            success)
              CONCLUSION="success"
              ;;
            failure)
              CONCLUSION="failure"
              ;;
            cancelled)
              CONCLUSION="cancelled"
              ;;
            *)
              CONCLUSION="neutral"
              ;;
          esac
          
          ci/scripts/github-checks-update.sh \
            --status "${{ job.status }}" \
            --phase "$(jq -r .current_phase.id docs/ci-status/pipeline-log.json 2>/dev/null || echo 'unknown')" \
            --matrix "${{ matrix.os }}-${{ matrix.rust_profile }}-${{ matrix.cpu_variant }}" \
            --conclusion "$CONCLUSION"
          
          # Record artifact hashes for traceability
          if [[ "${{ job.status }}" == "success" ]]; then
            if [[ -f "target/m68k-next-nextstep/${{ matrix.rust_profile }}/hello-world.mach-o" ]]; then
              HASH=$(sha256sum target/m68k-next-nextstep/${{ matrix.rust_profile }}/hello-world.mach-o | cut -d' ' -f1)
              python3 ci/scripts/status-append.py "artifact_hash" \
                '{"file": "hello-world.mach-o", "hash": "'$HASH'", "matrix": "${{ matrix.os }}-${{ matrix.rust_profile }}-${{ matrix.cpu_variant }}"}'
            fi
          fi

  # Parallel phase execution
  emulator-setup:
    runs-on: ubuntu-latest
    # This can run in parallel with build
    needs: []  
    steps:
      - uses: actions/checkout@v4
      - name: Setup Emulator
        run: |
          echo "Setting up Previous emulator..."
          # TODO: Implement emulator setup
    
  rust-std-port:
    runs-on: ubuntu-latest
    # Only depends on successful basic target
    needs: [build-matrix]
    if: contains(needs.build-matrix.result, 'success')
    steps:
      - uses: actions/checkout@v4
      - name: Port Rust Standard Library
        run: |
          echo "Porting rust std library..."
          # TODO: Implement std library porting